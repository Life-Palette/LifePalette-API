// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement()) @db.UnsignedInt
  mobile           String        @unique @db.Char(20)
  name             String?
  password         String
  avatar           String?
  github           String?
  wakatime         String?
  wechat           String?
  gitee            String?
  qq               String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  Topic            Topic[]
  comments         Comment[]
  Reply            Reply[]
  role             String?       @default("user")
  likes            Like[] // 添加点赞关系
  collections      Collection[] // 添加收藏关系
  sex              Int           @default(0)
  birthday         DateTime?
  city             String?
  job              String?
  company          String?
  signature        String?
  email            String?
  website          String?
  freezed          Boolean?      @default(false)
  uuId             String?       @unique @db.Char(16)
  background       String?
  sentMessages     Message[]     @relation("SenderRelation")
  receivedMessages Message[]     @relation("ReceiverRelation")
  ChatRoom         ChatRoom?     @relation(fields: [chatRoomId], references: [id])
  chatRoomId       Int?          @db.UnsignedInt
  ChatMessage      ChatMessage[]
}

model System {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  title       String
  description String
  preview     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
}

model Tag {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  title         String
  LessonTag     LessonTag[]
  TopicTag      TopicTag[]
  cover         String?
  thumbnailPath String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Lesson {
  id          Int         @id @default(autoincrement()) @db.UnsignedInt
  title       String
  price       Decimal     @db.Decimal(8, 2)
  description String
  preview     String
  download    String?
  click       Int?        @db.UnsignedMediumInt
  status      Boolean
  videoNum    Int?        @db.UnsignedMediumInt
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  System      System?     @relation(fields: [systemId], references: [id])
  systemId    Int?        @db.UnsignedInt
  LessonTag   LessonTag[]
  videos      Video[]
}

model LessonTag {
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int      @db.UnsignedInt
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  Int      @db.UnsignedInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([tagId, lessonId])
}

model Topic {
  id          Int          @id @default(autoincrement()) @db.UnsignedInt
  title       String
  content     String       @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  TopicTag    TopicTag[]
  User        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int          @db.UnsignedInt
  comments    Comment[]
  likes       Like[] // 添加点赞关系
  collections Collection[] // 添加收藏关系
  files       Json?
}

model Like {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  topicId   Int      @db.UnsignedInt
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @db.UnsignedInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topic     Topic    @relation(fields: [topicId], references: [id])

  @@unique([topicId, userId])
}

model Collection {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  topicId   Int      @db.UnsignedInt
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @db.UnsignedInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topic     Topic    @relation(fields: [topicId], references: [id])

  @@unique([topicId, userId])
}

model TopicTag {
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int      @db.UnsignedInt
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   Int      @db.UnsignedInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([tagId, topicId])
}

model Video {
  id       Int       @id @default(autoincrement()) @db.UnsignedInt
  title    String
  path     String
  Lesson   Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId Int       @db.UnsignedInt
  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?     @db.UnsignedInt
  Topic     Topic?   @relation(fields: [topicId], references: [id])
  topicId   Int?     @db.UnsignedInt
  Video     Video?   @relation(fields: [videoId], references: [id])
  videoId   Int?     @db.UnsignedInt
  Reply     Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @db.UnsignedInt
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int      @db.UnsignedInt
}

model Qr {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  key       String   @unique
  status    String   @default("INIT")
  userId    Int?     @db.UnsignedInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  type      String   @db.Text
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User? @relation("SenderRelation", fields: [senderId], references: [id])
  senderId Int?  @db.UnsignedInt

  receiver   User?    @relation("ReceiverRelation", fields: [receiverId], references: [id])
  receiverId Int?     @db.UnsignedInt
  isRead     Boolean @default(false)
  objId      Int?
}

// 聊天室
model ChatRoom {
  id        Int           @id @default(autoincrement()) @db.UnsignedInt
  name      String        @db.Text
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  users     User[]
  messages  ChatMessage[]
}

// 聊天室消息
model ChatMessage {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  content   String?   @db.Text
  type      String   @default("text")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @db.UnsignedInt
  room      ChatRoom @relation(fields: [roomId], references: [id])
  roomId    Int      @db.UnsignedInt
  file      Json?
}
